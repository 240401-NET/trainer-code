# This is a basic workflow to help you get started with Actions

name: CI with SonarCloud Demo

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "devops" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  # build:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
    
      # # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Hello, world!
      # - name: Display Secret Date
      #   run: echo ${{ secrets.SUPERSECRETECODE }}
      # - name: Multiline script
      #   run: |
      #     echo Hello, World!
      #     echo I\'m github actions runner
      #     ls
      #     pwd
      # - name: Checkout Github Repository
      #   uses: actions/checkout@v4.1.5

  sonar-analysis:
    # Depends on successful build job to process this job. Without this, these two jobs will run in parallel
    # needs: build
    runs-on: windows-latest
    
    steps:
     - name: checkout github repository
       uses: actions/checkout@v4.1.5
       with:
           fetch-depth: 0 
     - name: Set up JDK 11
       uses: actions/setup-java@v1
       with:
         java-version: 1.11
     - name: Cache SonarCloud packages
       uses: actions/cache@v3
       with:
         path: ~\sonar\cache
         key: ${{ runner.os }}-sonar
         restore-keys: ${{ runner.os }}-sonar
     - name: Cache SonarCloud scanner
       id: cache-sonar-scanner
       uses: actions/cache@v3
       with:
         path: .\.sonar\scanner
         key: ${{ runner.os }}-sonar-scanner
         restore-keys: ${{ runner.os }}-sonar-scanner
     - name: Install SonarCloud scanner
       if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
       shell: powershell
       run: |
         New-Item -Path .\.sonar\scanner -ItemType Directory
         dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
     - name: Test
       env:
         WORKING_DIR: Week3/PetApp/Pets.Tests
       run: dotnet test ${{env.WORKING_DIR}} --collect:"XPlat Code Coverage" --logger trx -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
  
     - name: Build and analyze
       env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        WORKING_DIRECTORY: Week3/PetApp/Pets.API
       shell: powershell
       run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"240401-NET_trainer-code" /o:"240401-net" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
        dotnet build ${{env.WORKING_DIRECTORY}}
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
